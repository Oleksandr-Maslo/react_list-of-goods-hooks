{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setType","isReversed","setReverse","visibleGoods","goods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","classNames","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAiCH,oBAAS,GAA1C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAxBD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENE,EAAY,YAAOC,GAUzB,OARIL,IAAaL,EAASW,UACxBF,EAAaG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAG1CT,IAAaL,EAASgB,QACxBP,EAAaG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAGvCV,EACKE,EAAaS,UAGfT,EAMcU,CACnBlB,EAAiB,CAAEI,WAAUE,eAG/B,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SAAU,UAAWjB,IAAaL,EAASW,SACvC,GACA,YAENY,QAAS,kBAAMjB,EAAQN,EAASW,WAPlC,iCAYA,wBACEU,KAAK,SACLD,UAAWE,IACT,SAAU,aAAcjB,IAAaL,EAASgB,OAC1C,GACA,YAENO,QAAS,kBAAMjB,EAAQN,EAASgB,SAPlC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SAAU,aAAcf,EAAa,GAAK,YAE5CgB,QAAS,WACPf,GAAW,SAAAgB,GAAO,OAAKA,MAN3B,sBAYEjB,GAAcF,IAAaL,EAASI,OACpC,wBACEiB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,EAAQN,EAASI,MACjBI,GAAW,IALf,sBAaJ,6BACGC,EAAagB,KAAI,SAACC,GAAD,OAChB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC7GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.86cb8d74.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort((a, b) => a.localeCompare(b));\n  }\n\n  if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((a, b) => a.length - b.length);\n  }\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setType] = useState(SortType.NONE);\n  const [isReversed, setReverse] = useState(false);\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer, { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-info', sortType === SortType.ALPHABET\n              ? ''\n              : 'is-light',\n          )}\n          onClick={() => setType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-success', sortType === SortType.LENGTH\n              ? ''\n              : 'is-light',\n          )}\n          onClick={() => setType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button', 'is-warning', isReversed ? '' : 'is-light',\n          )}\n          onClick={() => {\n            setReverse(current => !current);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setType(SortType.NONE);\n              setReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}